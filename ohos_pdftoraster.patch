diff --git a/filter/pdftoraster.cxx b/filter/pdftoraster.cxx
index e8af184f..1f6c081f 100755
--- a/filter/pdftoraster.cxx
+++ b/filter/pdftoraster.cxx
@@ -49,12 +49,9 @@ SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #include <cupsfilters/colormanager.h>
 #include <strings.h>
 #include <math.h>
-#include <poppler/cpp/poppler-document.h>
-#include <poppler/cpp/poppler-page.h>
-#include <poppler/cpp/poppler-global.h>
-#include <poppler/cpp/poppler-image.h>
-#include <poppler/cpp/poppler-page-renderer.h>
-#include <poppler/cpp/poppler-rectangle.h>
+#include "fpdfview.h"
+#include "fpdf_edit.h"
+#include "cpp/fpdf_scopers.h"
 #ifdef USE_LCMS1
 #include <lcms.h>
 #define cmsColorSpaceSignature icColorSpaceSignature
@@ -1551,7 +1548,7 @@ static unsigned char *removeAlpha(unsigned char *src, unsigned char *dst, unsign
   return temp;
 }
 
-static void writePageImage(cups_raster_t *raster, poppler::document *doc,
+static void writePageImage(cups_raster_t *raster, FPDF_DOCUMENT doc,
   int pageNo)
 {
   ConvertLineFunc convertLine;
@@ -1559,36 +1556,37 @@ static void writePageImage(cups_raster_t *raster, poppler::document *doc,
   unsigned char *dp;
   unsigned int rowsize;
 
-  poppler::page *current_page =doc->create_page(pageNo-1);
-  poppler::page_renderer pr;
-  pr.set_render_hint(poppler::page_renderer::antialiasing, true);
-  pr.set_render_hint(poppler::page_renderer::text_antialiasing, true);
+  FPDF_PAGE current_page = FPDF_LoadPage(doc, pageNo -1);
 
   unsigned char *colordata,*newdata,*graydata,*onebitdata;
   unsigned int pixel_count;
-  poppler::image im;
+  int alpha = FPDFPage_HasTransparency(current_page) ? 1 : 0;
+  ScopedFPDFBitmap bitmap(FPDFBitmap_Create(header.cupsWidth, header.cupsHeight, alpha));
+  FPDFBitmap_FillRect(bitmap.get(), 0, 0, header.cupsWidth, header.cupsHeight, 0xFFFFFFFF);
   //render the page according to the colourspace and generate the requried data
   switch (header.cupsColorSpace) {
    case CUPS_CSPACE_W://gray
    case CUPS_CSPACE_K://black
    case CUPS_CSPACE_SW://sgray
     if(header.cupsBitsPerColor==1){ //special case for 1-bit colorspaces
-      im = pr.render_page(current_page,header.HWResolution[0],header.HWResolution[1],bitmapoffset[0],bitmapoffset[1],bytesPerLine*8,header.cupsHeight);
-    newdata = (unsigned char *)malloc(sizeof(char)*3*im.width()*im.height());
-    newdata = removeAlpha((unsigned char *)im.const_data(),newdata,im.width(),im.height());
-    graydata=(unsigned char *)malloc(sizeof(char)*im.width()*im.height());
-    cupsImageRGBToWhite(newdata,graydata,im.width()*im.height());
-    onebitdata=(unsigned char *)malloc(sizeof(char)*bytesPerLine*im.height());
-    onebitpixel(graydata,onebitdata,im.width(),im.height());
+    FPDF_RenderPageBitmap(bitmap.get(), current_page, bitmapoffset[0], bitmapoffset[1], bytesPerLine*8, header.cupsHeight, 0, 0);
+    void *buffer = FPDFBitmap_GetBuffer(bitmap.get());
+    newdata = (unsigned char *)malloc(sizeof(char)*3*header.cupsWidth*header.cupsHeight);
+    newdata = removeAlpha((unsigned char *)buffer, newdata, header.cupsWidth, header.cupsHeight);
+    graydata=(unsigned char *)malloc(sizeof(char)*header.cupsWidth*header.cupsHeight);
+    cupsImageRGBToWhite(newdata,graydata,header.cupsWidth*header.cupsHeight);
+    onebitdata=(unsigned char *)malloc(sizeof(char)*bytesPerLine*header.cupsHeight);
+    onebitpixel(graydata,onebitdata,header.cupsWidth, header.cupsHeight);
     colordata=onebitdata;
     rowsize=bytesPerLine;
     }
     else{
-      im = pr.render_page(current_page,header.HWResolution[0],header.HWResolution[1],bitmapoffset[0],bitmapoffset[1],header.cupsWidth,header.cupsHeight);
-      newdata = (unsigned char *)malloc(sizeof(char)*3*im.width()*im.height());
-      newdata = removeAlpha((unsigned char *)im.const_data(),newdata,im.width(),im.height());
-      pixel_count=im.width()*im.height();
-      graydata=(unsigned char *)malloc(sizeof(char)*im.width()*im.height());
+      FPDF_RenderPageBitmap(bitmap.get(), current_page, bitmapoffset[0], bitmapoffset[1], header.cupsWidth, header.cupsHeight, 0, 0);
+      void *buffer = FPDFBitmap_GetBuffer(bitmap.get());
+      newdata = (unsigned char *)malloc(sizeof(char)*3*header.cupsWidth*header.cupsHeight);
+      newdata = removeAlpha((unsigned char *)buffer, newdata, header.cupsWidth, header.cupsHeight);
+      pixel_count=header.cupsWidth * header.cupsHeight;
+      graydata=(unsigned char *)malloc(sizeof(char)*header.cupsWidth*header.cupsHeight);
       cupsImageRGBToWhite(newdata,graydata,pixel_count);
       colordata=graydata;
       rowsize=header.cupsWidth;
@@ -1602,10 +1600,15 @@ static void writePageImage(cups_raster_t *raster, poppler::document *doc,
    case CUPS_CSPACE_CMY:
    case CUPS_CSPACE_RGBW:
    default:
-   im = pr.render_page(current_page,header.HWResolution[0],header.HWResolution[1],bitmapoffset[0],bitmapoffset[1],header.cupsWidth,header.cupsHeight);
-   newdata = (unsigned char *)malloc(sizeof(char)*3*im.width()*im.height());
-   newdata = removeAlpha((unsigned char *)im.const_data(),newdata,im.width(),im.height());
-   pixel_count=im.width()*im.height();
+  //  im = pr.render_page(current_page,header.HWResolution[0],header.HWResolution[1],bitmapoffset[0],bitmapoffset[1],header.cupsWidth,header.cupsHeight);
+  //  newdata = (unsigned char *)malloc(sizeof(char)*3*im.width()*im.height());
+  //  newdata = removeAlpha((unsigned char *)im.const_data(),newdata,im.width(),im.height());
+  //  pixel_count=im.width()*im.height();
+   FPDF_RenderPageBitmap(bitmap.get(), current_page, bitmapoffset[0], bitmapoffset[1], header.cupsWidth, header.cupsHeight, 0, 0);
+   void *buffer = FPDFBitmap_GetBuffer(bitmap.get());
+   newdata = (unsigned char *)malloc(sizeof(char)*3*header.cupsWidth*header.cupsHeight);
+   newdata = removeAlpha((unsigned char *)buffer, newdata, header.cupsWidth, header.cupsHeight);
+   pixel_count=header.cupsWidth * header.cupsHeight;
    rowsize=header.cupsWidth*3;
    colordata=newdata;
      break;
@@ -1649,7 +1652,7 @@ static void writePageImage(cups_raster_t *raster, poppler::document *doc,
   if (allocLineBuf) delete[] lineBuf;
 }
 
-static void outPage(poppler::document *doc, int pageNo,
+static void outPage(FPDF_DOCUMENT doc, int pageNo,
   cups_raster_t *raster)
 {
   int rotate = 0;
@@ -1661,28 +1664,19 @@ static void outPage(poppler::document *doc, int pageNo,
   int imageable_area_fit = 0;
   int i;
 
-  poppler::page *current_page =doc->create_page(pageNo-1);
-  poppler::page_box_enum box = poppler::page_box_enum::media_box;
-  poppler::rectf mediaBox = current_page->page_rect(box);
-  poppler::page::orientation_enum orient = current_page->orientation();
-  switch (orient) {
-    case poppler::page::landscape: rotate=90;
-     break;
-    case poppler::page::upside_down: rotate=180;
-     break;
-    case poppler::page::seascape: rotate=270;
-     break;
-     default:rotate=0;
-  }
+  FPDF_PAGE current_page = FPDF_LoadPage(doc, pageNo - 1);
+  FS_RECTF mediaBox;
+  FPDFPage_GetMediaBox(current_page, &mediaBox.left, &mediaBox.bottom, &mediaBox.right, &mediaBox.top);
+  rotate = FPDFPage_GetRotation(current_page);
   fprintf(stderr, "DEBUG: mediaBox = [ %f %f %f %f ]; rotate = %d\n",
-	  mediaBox.left(), mediaBox.top(), mediaBox.right(), mediaBox.bottom(), rotate);
-  l = mediaBox.width();
+	  mediaBox.left, mediaBox.top, mediaBox.right, mediaBox.bottom, rotate);
+  l = mediaBox.right - mediaBox.left;
   if (l < 0) l = -l;
   if (rotate == 90 || rotate == 270)
     header.PageSize[1] = (unsigned)l;
   else
     header.PageSize[0] = (unsigned)l;
-  l = mediaBox.height();
+  l = mediaBox.bottom - mediaBox.top;
   if (l < 0) l = -l;
   if (rotate == 90 || rotate == 270)
     header.PageSize[0] = (unsigned)l;
@@ -1884,6 +1878,7 @@ static void outPage(poppler::document *doc, int pageNo,
 
   /* write page image */
   writePageImage(raster,doc,pageNo);
+  FPDF_ClosePage(current_page);
 }
 
 static void setPopplerColorProfile()
@@ -1972,11 +1967,12 @@ static void setPopplerColorProfile()
 }
 
 int main(int argc, char *argv[]) {
-  poppler::document *doc;
+  FPDF_DOCUMENT doc;
   int i;
   int npages=0;
   cups_raster_t *raster;
 
+  FPDF_InitLibrary();
   cmsSetLogErrorHandler(lcmsErrorHandler);
   parseOpts(argc, argv);
 
@@ -2002,7 +1998,7 @@ int main(int argc, char *argv[]) {
       }
     }
     close(fd);
-    doc=poppler::document::load_from_file(name,"","");
+    doc = FPDF_LoadDocument(name, NULL);
     /* remove name */
     unlink(name);
   } else {
@@ -2015,11 +2011,11 @@ int main(int argc, char *argv[]) {
     }
     parsePDFTOPDFComment(fp);
     fclose(fp);
-    doc=poppler::document::load_from_file(argv[6],"","");
+    doc = FPDF_LoadDocument(argv[6], NULL);
   }
 
   if(doc != NULL)
-    npages = doc->pages();
+    npages = FPDF_GetPageCount(doc);
 
   /* fix NumCopies, Collate ccording to PDFTOPDFComments */
   header.NumCopies = deviceCopies;
@@ -2140,33 +2136,7 @@ int main(int argc, char *argv[]) {
   if (colorTransform != NULL) {
     cmsDeleteTransform(colorTransform);
   }
-
+  FPDF_CloseDocument(doc);
+  FPDF_DestroyLibrary();
   return exitCode;
 }
-
-/* replace memory allocation methods for memory check */
-/* For compatibility with g++ >= 4.7 compilers _GLIBCXX_THROW
- *  should be used as a guard, otherwise use traditional definition */
-#ifndef _GLIBCXX_THROW
-#define _GLIBCXX_THROW throw
-#endif
-
-void * operator new(size_t size) _GLIBCXX_THROW (std::bad_alloc)
-{
-  return malloc(size);
-}
-
-void operator delete(void *p) throw ()
-{
-  free(p);
-}
-
-void * operator new[](size_t size) _GLIBCXX_THROW (std::bad_alloc)
-{
-  return malloc(size);
-}
-
-void operator delete[](void *p) throw ()
-{
-  free(p);
-}
